Experiment – 1
Sampling Theorem
clc;clear all; close all;
f1=input('Enter the first freq');
f2=input('Enter the second freq');
t=0:0.001:0.2;
y=cos(2*pi*f1*t)+cos(2*pi*f2*t);
fm=max(f1,f2);
%Under Sampling
fs=fm;
tx=0:1/fs:0.2;
ys=cos(2*pi*f1*tx)+cos(2*pi*f2*tx);
subplot(3,3,1);plot(t,y);title('input signal');xlabel('time in s');ylabel('Amplitude in V');
subplot(3,3,2);stem(tx,ys);title('Undersampled samples');xlabel('time in s');ylabel('Amplitude in V');
subplot(3,3,3);plot(tx,ys);title('Reconstructed Signal');xlabel('time in s');ylabel('Amplitude in V');
%Critical Sampling
fs=2*fm;
tx=0:1/fs:0.2;
ys=cos(2*pi*f1*tx)+cos(2*pi*f2*tx);
subplot(3,3,4);plot(t,y);title('input signal');xlabel('time in s');ylabel('Amplitude in V');
subplot(3,3,5);stem(tx,ys);title('CriticalSampled samples');xlabel('time in s');ylabel('Amplitude in V');
subplot(3,3,6);plot(tx,ys);title('Reconstructed Signal');xlabel('time in s');ylabel('Amplitude in V');
%Over Sampling
fs=20*fm;
tx=0:1/fs:0.2;
ys=cos(2*pi*f1*tx)+cos(2*pi*f2*tx);
subplot(3,3,7);plot(t,y);title('input signal');xlabel('time in s');ylabel('Amplitude in V');
subplot(3,3,8);stem(tx,ys);title('OverSampled samples');xlabel('time in s');ylabel('Amplitude in V');
subplot(3,3,9);plot(tx,ys);title('Reconstructed Signal');xlabel('time in s');ylabel('Amplitude in V');

Experiment -2
Linear Convolution

x=input('Enter the first sequence');
h=input('Enter the second sequence');
n1=input('Enter the time index of first sequence');
n2=input('Enter the time index of second sequence');
N=n1(1)+n2(1):n1(end)+n2(end);
y=conv(x,h)
subplot(3,1,1);stem(n1,x);title('First Sequence');xlabel('Time');ylabel('Amplitude');
subplot(3,1,2);stem(n2,h);title('Second Sequence');xlabel('Time');ylabel('Amplitude');
subplot(3,1,3);stem(N,y);title('Output Sequence');xlabel('Time');ylabel('Amplitude');

Properties of Linear Conv
x=input('Enter the input sequence');
h=input('Enter the impulse sequence');
LHS=conv(x,h)
RHS=conv(h,x)
if (LHS==RHS)
    display('Commutative Property is verified');
end
x=input('Enter the input sequence');
h1=input('Enter the impulse sequence');
h2=input('Enter the impulse sequence');
xh1=conv(x,h1);
LHS=conv(xh1,h2)
h1h2=conv(h1,h2);
RHS=conv(x,h1h2)
if (LHS==RHS)
    display('Associative Property is verified');
end
h12=h1+h2;
LHS=conv(x,h12)
xh1=conv(x,h1);
xh2=conv(x,h2);
RHS=xh1+xh2
if (LHS==RHS)
    display('Distributive Property is verified');
end

Circular Conv:
x=input('Enter first sequence x(n)=');
h=input('Enter second sequence h(n)=');
N=max(length(x),length(h));
for n=0:N-1
    y(n+1)=0;
    for k=0:N-1
        i=mod((n-k),N);
        if (i<0)
            i=i+N;
        end
        y(n+1)=y(n+1)+h(k+1)*x(i+1);
    end
end
disp(y);
 
n1=0:N-1;
stem(n1,y);
title('Circular Convolution output y(n)');






Experiment – 3
Auto Correlation
x=input('Enter the sequence');
nx=input('Enter the time index range');
AC=xcorr(x,x)
n=-nx(end):1:nx(end)
subplot(2,1,1);stem(nx,x);xlabel('time index');ylabel('amplitude');title('input sequence');
subplot(2,1,2);stem(n,AC);xlabel('time index');ylabel('amplitude');title('Auto correlated sequence');
%Properties 
rhs=fliplr(AC);
lhs=AC;
if (rhs==lhs)
    disp('AutoCorrelation is even function')
end
%Energy
e=[x(1)*x(1)+x(2)*x(2)+x(3)*x(3)+x(4)*x(4)];
rhs=e;
lhs=max(AC);
if rhs==lhs
    disp('Energy of AutoCorrelation is AC(0)');
end

Cross Correlation
clc;clear all;close all;
x=input('Enter first input sequence ');
h=input('Enter second input sequence ');
nx=input('Enter time index range x ');
nh=input('Enter time index range h ');
cc=xcorr(x,h)
n=nx(1)+nh(1):1:nx(end)+nh(end);
subplot(3,1,1);stem(nx,x);xlabel('time index');ylabel('amplitude');title('first input sequence');
subplot(3,1,2);stem(nh,h);xlabel('time index');ylabel('amplitude');title('second input sequence');
subplot(3,1,3);stem(n,cc);xlabel('time index');ylabel('amplitude');title('Cross correlated sequence');
%Properties 
rhs=fliplr(cc);
lhs=cc;
if (rhs==lhs)
    disp('Cross Correlation is even function')
end
%Energy
e=[x(1)*h(1)+x(2)*h(2)+x(3)*h(3)+x(4)*h(4)];
rhs=e;
lhs=max(cc);
if rhs==lhs
    disp('Energy of CrossCorrelation is CC(0)');
end




Experiment – 4
DFT
Using FFT:
x=[1 2 3 4];
N=4;
xk=fft(x,N)
n=0:1:N-1;
figure(1);stem(n,abs(xk));xlabel('k');ylabel('|xk|');title('Magnitude spectrum');
figure(2);stem(n,angle(xk));xlabel('k');ylabel('angle(xk)');title('Phase spectrum');
figure(3);
n1=0:1:length(x)-1;
stem(n1,x);xlabel('n');ylabel('x[n]');title('original signal');

Without Using FFT :
x=[1 2 3 4];
N=4;
for k=0:N-1
    xk(k+1)=0;
    for n=0:N-1
        xk(k+1)=xk(k+1)+x(n+1)*exp(-j*2*pi*n*k/N);
    end
end
n=0:1:N-1;
figure(1);stem(n,abs(xk));xlabel('k');ylabel('|xk|');title('Magnitude spectrum');
figure(2);stem(n,angle(xk));xlabel('k');ylabel('angle(xk)');title('Phase spectrum');
figure(3);
n1=0:1:length(x)-1;
stem(n1,x);xlabel('n');ylabel('x[n]');title('original signal');
disp(xk);


Experiment – 5
Prop of DFT :

%Linearity
x1=input('Enter the first sequence');
x2=input('Enter the second sequence');
n1=length(x1);
n2=length(x2);
a=input('Enter the value of a');
b=input('Enter the value of b');
LHS=fft((a*x1+b*x2),n1)
x1f=fft(x1,n1);
x2f=fft(x2,n2);
RHS=(a*x1f+b*x2f)
if LHS==RHS
    disp('Linearity Property is Verified');
end
%Parsevals
x=input('Enter the input sequence');
N=input('Enter the length of input sequence');
LHS=sum(abs(x.^2))
xf=fft(x,N);
RHS=(sum(abs(xf.^2)))/N
if LHS==RHS
    disp('Parsevals Theorem is Verified');
end

Square Function :

N=128;
x1=[ones(1,N/4),-1*ones(1,N/4),ones(1,N/4),-1*ones(1,N/4)];
n1=length(x1);
c=zeros(N);
for k=1:N
    for n=1:N
        w=exp((-2*pi*i*(k-1)*(n-1))/N);
        x(n)=w;
    end
    c(k,:)=x;
end
r1=c*x1';
idx=-(N/2):1:(N/2)-1;
for k=1:N
    if k<=N/2
        r2(k+N/2)=r1(k);
    else
        r2(k-N/2+1)=r1(k);
    end
end
figure,
subplot(3,1,1),stem(x1),title('Square Waveform');
subplot(3,1,2),stem(idx,abs(r2)),title('Magnitude of DFT of Square Waveform');
subplot(3,1,3),stem(idx,angle(r2)),title('Phase of DFT of Square Waveform');

Sinc Function:

N=128;
n=-16:32/N:16-32/N;
x1=sinc(n);
n1=length(x1);
c=zeros(N);
for k=1:N
    for n=1:N
        w=exp((-2*pi*i*(k-1)*(n-1))/N);
        x(n)=w;
    end
    c(k,:)=x;
end
r1=c*x1';
idx=-(N/2):1:(N/2)-1;
for k=1:N
    if k <= N/2
        r2(k+N/2)=r1(k);
    else
        r2(k-N/2+1)=r1(k);
    end
end
figure,
subplot(3,1,1),plot(x1),title('Square Waveform');
subplot(3,1,2),plot(idx,abs(r2)),title('Magnitude of DFT of Square Waveform');
subplot(3,1,3),stem(idx,angle(r2)),title('Phase of DFT of Square Waveform');



Experiment – 6
Diff Equation
Impulse Response:

N=input('Length of response required=');
b=[1]; 
a=[1,-1,0.9];
x=[1,zeros(1,N-1)];
n=0:1:N-1; 
h=filter(b,a,x);
 
subplot(2,1,1);
stem(n,x);
title('impulse input');
xlabel('n');
ylabel('x(n)');
subplot(2,1,2);
stem(n,h);
title('Impulse response');
xlabel('n');
ylabel('h(n)');

Step Response :

N=input('Length of response required=');
b=[1]; 
a=[1,-1,0.9];
x=ones(1,N);
n=0:1:N-1; 
y=filter(b,a,x);
 
subplot(2,1,1);
stem(n,x);
title('step input');
xlabel('n');
ylabel('u(n)');
subplot(2,1,2);
stem(n,h);
title('Step response');
xlabel('n');
ylabel('y(n)');

Steady State Response:

N=input('Length of response required=');
b=[1]; 
a=[1,-0.8]; 
n=0:1:N-1; 
x=cos(0.05*pi*n); 
y=filter(b,a,x); 
 
subplot(2,1,1);
stem(n,x);
title('steady state input');
xlabel('n');
ylabel('x(n)');
subplot(2,1,2);
stem(n,y);
title('steady and state response');
xlabel('n');
ylabel('y(n)');



